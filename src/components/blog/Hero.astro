---
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'

import PageInfo from '@/components/pages/PageInfo.astro'
import { FormattedDate } from '@/components/user'

interface Props {
  content: CollectionEntry<'post'>
}

const {
  content: { slug, data, render }
} = Astro.props

const { remarkPluginFrontmatter } = await render()

const dateTimeOptions: Intl.DateTimeFormatOptions = {
  month: 'short'
}
---

{
  data.heroImage && (
    <div class='hero-image relative mb-6'>
      {/* @ts-expect-error: image support this type */}
      <Image
        alt={data.heroImage.alt || data.title}
        class='cover-image relative z-10 h-auto w-full max-w-[65ch] rounded-2xl object-contain'
        fetchpriority='high'
        loading='eager'
        src={data.heroImage.src}
      />
      {/* @ts-expect-error: image support this type */}
      <Image
        alt={data.heroImage.alt || data.title}
        fetchpriority='high'
        loading='eager'
        src={data.heroImage.src}
        id='blurImage'
        class='absolute end-0 top-4 z-0 mt-0 h-full max-w-[65ch] rounded-3xl opacity-60 blur-xl transition-opacity duration-300'
      />
    </div>
  )
}

{data.draft ? <span class='text-red-500'>(Draft)</span> : null}

<div class='article-info animate max-lg:mx-auto'>
  <div class='flex flex-wrap gap-x-4 gap-y-2 text-xs leading-6 text-muted-foreground'>
    {/* Article date */}
    <div class='flex items-center gap-1'>
      <svg class='size-5'>
        <use href='/icons/ui.svg#mingcute-calendar-2-line'></use>
      </svg>
      <FormattedDate class='font-sans' date={data.publishDate} dateTimeOptions={dateTimeOptions} />
      {
        data.updatedDate && (
          <div class='flex items-center gap-1'>
            <span> / </span>
            <span>
              Update
              <FormattedDate
                class='font-sans'
                date={data.updatedDate}
                dateTimeOptions={dateTimeOptions}
              />
            </span>
          </div>
        )
      }
    </div>
    {/* Times read */}
    <div class='flex items-center gap-1'>
      <svg class='size-5'>
        <use href='/icons/ui.svg#mingcute-time-line'></use>
      </svg>
      {remarkPluginFrontmatter.minutesRead}
    </div>
    {
      // Language
      data.language && (
        <span class='flex items-center gap-1'>
          <svg class='size-5'>
            <use href='/icons/project.svg#mingcute-earth-2-line' />
          </svg>
          {data.language}
        </span>
      )
    }
  </div>

  <h1 class='mt-4 text-2xl font-medium sm:mb-2 sm:mt-6 sm:text-3xl'>
    {data.title}
  </h1>

  {
    // Tags
    !!data.tags?.length && (
      <div class='mt-3 flex flex-row flex-wrap items-center gap-x-1 text-muted-foreground sm:mt-5'>
        <svg class='size-5'>
          <use href='/icons/ui.svg#mingcute-hashtag-line' />
        </svg>
        {data.tags.map((tag: string, i: number) => (
          <div>
            <a
              aria-label={`View more blogs with the tag ${tag}`}
              class='inline-block hover:underline hover:underline-offset-4'
              data-pagefind-filter='tag'
              href={`/tags/${tag}`}
            >
              {tag}
            </a>
            {i < data.tags.length - 1 && '/'}
          </div>
        ))}
      </div>
    )
  }

  <div class='mt-3 italic'>
    <blockquote class='text-sm text-muted-foreground'><q>{data.description}</q></blockquote>
    {!data.draft && <PageInfo class='mt-1' path={`/blog/${slug}`} />}
  </div>
</div>

{/* Dividing line */}
<div class='mt-4 w-1/2 border-t max-lg:mx-auto sm:mt-6 sm:w-1/3'></div>

<script>
  const viewportHeight = window.innerHeight
  const threshold1 = viewportHeight / 9
  const threshold2 = (viewportHeight * 2) / 9
  const threshold3 = (viewportHeight * 3) / 9
  const image = document.getElementById('blurImage') as HTMLImageElement

  if (image) {
    window.addEventListener('scroll', () => {
      const scrollDistance = window.scrollY
      // console.log(scrollDistance, threshold1, threshold2, threshold3)

      if (scrollDistance >= threshold3) {
        image.style.opacity = '0.15'
      } else if (scrollDistance >= threshold2) {
        image.style.opacity = '0.3'
      } else if (scrollDistance >= threshold1) {
        image.style.opacity = '0.45'
      }
    })
  }
</script>
